".text.html":
	"Enqueue a script":
    "prefix": "wp_enqueue_template"
    "body": """
      /**
       * Enqueue a script.
       *
       * @param string		\$handle	Name of the script.
       * @param string		\$src		Path to the script from the root directory of WordPress. Example: '/js/myscript.js'.
       * @param array			\$deps		(optional) An array of registered handles this script depends on. Default empty array.
       * @param string|bool 		\$ver		(optional) Optional. String specifying the script version number, if it has one. This parameter
       *						is used to ensure that the correct version is sent to the client regardless of caching,
       *						and so should be included if a version number is available and makes sense for the script.
       * @param bool			\$in_footer 	(optional) Whether to enqueue the script before </head> or before </body>
       */
      function ${1:PREFIX_enqueue_scripts}() {
      	wp_enqueue_script( ${2:'${3:\$handle}', '${4:\$src}', ${5:array( 'jquery' )}, ${6:false}, ${7:false}});
      }

      add_action( 'wp_enqueue_scripts', '${1:PREFIX_enqueue_scripts}' );
    """
	"Display a navigation menu":
    "prefix": "wp_nav_menu_template"
    "body": """
      /**
       * Displays a navigation menu.
       *
       * @since 3.0.0
       */
      ${1:\$defaults} = array(
      	${2:${3:'theme_location' => '${4}',}
      	${5:'menu' => '${6}',}
      	${7:'container' => '${8:div}',}
      	${9:'container_class' => '${10:menu-\{menu-slug\}-container}',}
      	${11:'container_id' => '${12}',}
      	${13:'menu_class' => '${14:menu}',}
      	${15:'menu_id' => '${16}',}
      	${17:'echo' => ${18:true},}
      	${19:'fallback_cb' => '${20:wp_page_menu}',}
      	${21:'before' => '${22}',}
      	${23:'after' => '${24}',}
      	${25:'link_before' => '${26}',}
      	${27:'link_after' => '${28}',}
      	${29:'items_wrap' => '${30:<ul id="%1\$s" class="%2\$s">%3\$s</ul>}',}
      	${31:'depth' => ${32:0},}
      	${33:'walker' => '${34}'}
      });

      wp_nav_menu( ${1:\$defaults} );
    """
	"Clear Recuring Event":
    "prefix": "clear_scheduled"
    "body": """
      if ( ( \$next_run = wp_next_scheduled( '${1:event_action}' ) ) !== false ) {
      	wp_unschedule_event( \$next_run, '$1' );
      }
    """
	"Widget Template":
    "prefix": "widget_template"
    "body": """
      /**
       * Add ${1:PREFIX_Name}_Widget widget.
       */
      class $1_Widget extends WP_Widget {

          /**
           * Register widget with WordPress.
           *
           **/
          function __construct() {
              parent::__construct(
      			'foo_widget', // Base ID
      			__('${2:Title}', '${3:Text Domain}'), // Name
      			array( 'description' => __( '${4:Description}', '$3' ), ) // Args
      		);
          }

          /**
      	 * Front-end display of widget.
      	 *
      	 * @see WP_Widget::widget()
      	 *
      	 * @param array \$args     Widget arguments.
      	 * @param array \$instance Saved values from database.
      	 */
      	public function widget( \$args, \$instance ) {
      		\$title = apply_filters( 'widget_title', \$instance['title'] );

      		echo \$args['before_widget'];
      		if ( ! empty( \$title ) ) {
      			echo \$args['before_title'] . \$title . \$args['after_title'];
      		}
      		echo __( '${5:Default Content}', '$3' );
      		echo \$args['after_widget'];
      	}

          /**
      	 * Back-end widget form.
      	 *
      	 * @see WP_Widget::form()
      	 *
      	 * @param array \$instance Previously saved values from database.
      	 */
      	public function form( \$instance ) {
      		if ( isset( \$instance[ 'title' ] ) ) {
      			\$title = \$instance[ 'title' ];
      		}
      		else {
      			\$title = __( '${6:Default Title}', '$3'' );
      		}
      		?>
      		<p>
      		<label for="<?php echo \$this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ); ?></label>
      		<input class="widefat" id="<?php echo \$this->get_field_id( 'title' ); ?>" name="<?php echo \$this->get_field_name( 'title' ); ?>" type="text" value="<?php echo esc_attr( \$title ); ?>">
      		</p>
      		<?php
      	}

          /**
      	 * Sanitize widget form values as they are saved.
      	 *
      	 * @see WP_Widget::update()
      	 *
      	 * @param array \$new_instance Values just sent to be saved.
      	 * @param array \$old_instance Previously saved values from database.
      	 *
      	 * @return array Updated safe values to be saved.
      	 */
      	public function update( \$new_instance, \$old_instance ) {
      		\$instance = array();
      		\$instance['title'] = ( ! empty( \$new_instance['title'] ) ) ? strip_tags( \$new_instance['title'] ) : '';

      		return \$instance;
      	}
      }

      add_action( 'widgets_init', create_function( '', "register_widget( '$1_Widget' );" ) );
    """
